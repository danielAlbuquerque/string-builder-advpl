{
  "name": "AdvPL StringBuilder",
  "tagline": "An optimized way to concat strings with O(1) complexity in AdvPL",
  "body": "## AdvPL StringBuilder\r\n<img src=\"https://img.shields.io/badge/language-advpl-green.svg\" />\r\n\r\nThis is an implementation of string concatenation for AdvPL based on *virtual pointers* and on an internal research.\r\n\r\nBasically, in AdvPL, every string is immutable. When you do `+`, you have a `O(n ^ 2)` complexity, which is **very** expensive. Our implementation reduces it to `O(1)`, preallocating and reading directly from the memory, without any dependency on `+`. In our tests, we've got to run 240 times faster than in the classic model. Its use is recommended only for large string concatenation operation. `+` is faster for small strings.\r\n\r\n## Installation\r\n\r\nJust copy and compile the file `StringBuilder.prw` under `./src`.\r\n\r\n## Interface\r\n\r\n```harbour\r\nClass StringBuilder\r\n  Method New( cInit ) Constructor\r\n  Method Append( cBuffer )\r\n  Method Build()\r\n  Method Read()\r\n  Method Dispose()\r\nEndClass\r\n```\r\n\r\n## Example\r\n\r\n```harbour\r\nFunction TestStr\r\n  Local nI\r\n  Local oBuilder := StringBuilder():New( 'optional initializer' )\r\n  oBuilder:Append( '...' )\r\n  \r\n  For nI := 1 To 100000\r\n    oBuilder:Append( AllTrim( Str( nI ) ) )\r\n  Next nI\r\n  \r\n  ConOut( oBuilder:Read() ) // \"optional initializer... 123456789101112\" and so on...\r\n  oBuilder:Dispose() // Clear garbage from memory. Manual GC\r\n```\r\n\r\n## Maintainers\r\n\r\nThis project is maintained and developed by [NG Informática](http://ngi.com.br) ─ TOTVS Software Partner\r\n\r\n<div align=\"center\" style=\"width: 100%; height: 100px; vertical-align:middle;\">\r\n   <div>\r\n      <img src=\"https://avatars1.githubusercontent.com/u/21263692?v=3&s=200\" />\r\n   </div>\r\n   <div>\r\n      <img src=\"http://www.escriba.com.br/wp-content/uploads/2014/10/totvs.png\" width=\"100\" />\r\n   </div>\r\n</div>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}